// Fetch models catalog and write to src/providers/catalog.ts
// Usage: bun run scripts/update-catalog.ts

const SOURCE = 'https://models.dev/api.json';
const TARGET = 'src/providers/catalog.ts';

type ProviderFeed = Record<
	string,
	{
		id: string;
		name?: string;
		models: Record<string, any>;
	}
>;

type ProviderId = 'openai' | 'anthropic' | 'google';

type ModelInfo = {
	id: string;
	label?: string;
	modalities?: { input?: string[]; output?: string[] };
	toolCall?: boolean;
	reasoning?: boolean;
	attachment?: boolean;
};

function pickProviders(
	feed: ProviderFeed,
): Record<ProviderId, { models: ModelInfo[] }> {
	const out: Record<ProviderId, { models: ModelInfo[] }> = {
		openai: { models: [] },
		anthropic: { models: [] },
		google: { models: [] },
	};
	for (const providerKey of Object.keys(feed)) {
		const p = feed[providerKey];
		const key = providerKey as ProviderId;
		if (!['openai', 'anthropic', 'google'].includes(providerKey)) continue;
		const models: ModelInfo[] = [];
		for (const mid of Object.keys(p.models || {})) {
			const m = p.models[mid];
			models.push({
				id: String(m.id || mid),
				label: m.name || undefined,
				modalities: m.modalities || undefined,
				toolCall: Boolean(m.tool_call),
				reasoning: Boolean(m.reasoning),
				attachment: Boolean(m.attachment),
			});
		}
		models.sort((a, b) => a.id.localeCompare(b.id));
		out[key] = { models };
	}
	return out;
}

function toTs(catalog: Record<ProviderId, { models: ModelInfo[] }>) {
	const header = `// AUTO-GENERATED by scripts/update-catalog.ts. Do not edit manually.\n`;
	const types = `export type ProviderId = 'openai' | 'anthropic' | 'google';\n\nexport type ModelInfo = {\n  id: string;\n  label?: string;\n  modalities?: { input?: string[]; output?: string[] };\n  toolCall?: boolean;\n  reasoning?: boolean;\n  attachment?: boolean;\n};\n`;
	const body = `export const catalog: Record<ProviderId, { models: ModelInfo[] }> = ${JSON.stringify(catalog, null, 2)} as const;\n`;
	return header + '\n' + types + '\n' + body;
}

async function main() {
	const args = process.argv.slice(2);
	const fromIdx = args.indexOf('--from');
	let feed: ProviderFeed;
	if (fromIdx >= 0) {
		const file = args[fromIdx + 1];
		if (!file) throw new Error('--from requires a filepath');
		console.log(`Reading ${file} ...`);
		const text = await Bun.file(file).text();
		feed = JSON.parse(text);
	} else {
		console.log(`Fetching ${SOURCE} ...`);
		const res = await fetch(SOURCE);
		if (!res.ok)
			throw new Error(`Failed to fetch: ${res.status} ${res.statusText}`);
		feed = (await res.json()) as ProviderFeed;
	}
	const picked = pickProviders(feed);
	const ts = toTs(picked);
	await Bun.write(TARGET, ts);
	console.log(`Wrote ${TARGET}`);
}

main().catch((err) => {
	console.error(err);
	process.exit(1);
});
